#include<bits/stdc++.h>
using namespace std;
vector<int>v[10000+10];
int n,m,d[10000+10],low[10000+10],r=1,root;
bool vis[10000+10];
set<pair<int,int> >st;
void dfs(int x,int p)
{
    vis[x]=1;
    d[x]=r++;
    low[x]=d[x];

    for(int i=0; i<v[x].size(); i++)
    {
        if(v[x][i]==p)continue;
        if(!vis[v[x][i]])
        {

            dfs(v[x][i],x);
            low[x]=min(low[x],low[v[x][i]]);
            if(low[v[x][i]]>d[x] )
        {
            st.insert({min(x,v[x][i]),max(x,v[x][i])});
        }
        }
        else low[x]=min(low[x],d[v[x][i]]);

    }


}
int main()
{
    int tc=1,T;
    scanf("%d",&T);
    while (T--)
    {
        scanf("%d",&n);
        int x,y;

      for(int i=0;i<n;i++)
        {
            scanf("%d (%d)",&x,&m);
            while(m--){
            scanf("%d",&y);
            v[x].push_back(y);
            v[y].push_back(x);
            }

        }
        for(int i=0; i<n; i++){if(!vis[i]){root=i;r=1;dfs(i,-1);}}

        printf("Case %d:\n",tc++);
        printf("%d critical links\n",st.size());
        for(auto x: st)
        {
            printf("%d - %d\n",x.first,x.second);
        }
           st.clear();
        memset(vis,0,sizeof vis);
        memset(d,0,sizeof d);
        memset(low,0,sizeof low);
        for(int i=0; i<=n; i++)v[i].clear();
    }
}


